/*
Разработать алгоритм решения задания а, с учетом разделения вычислений
между несколькими процессами. Для обмена информацией между процессами
использовать неименованные каналы.

a)Определить является ли матрица А симметричной относительно побочной
диагонали. Входные данные: целое положительное число n, массив чисел А
размерности nxn.

*/
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <sys/types.h>
#include <signal.h>
#include <unistd.h>
#include <sys/wait.h>
using namespace std;
int main()
{
  int fd[2];
  int n; cout << "enter n:" <<endl;
  cin >> n;
  if (pipe(fd)<0) // откроем канал
  {
    cout << "\n Ошибка создания канала";
    return 0;
  }
  /* создаем матрицы, которые будем использовать в дальнейшем*/
  int ** a = new int*[n];
  for(int i=0;i<n;++i) a[i] = new int[n];
  int ** b = new int*[n];
  for(int i=0;i<n;++i) b[i] = new int[n];
  int ** c = new int*[n];
  for(int i=0;i<n;++i) c[i] = new int[n];

  for(int i=0;i<n;i++) { // записываем матрицу с консоли
      for (int j=0;j<n;++j){
          cout << "a[" << i << "][" << j << "]: ";
          cin >>a[i][j];
      }
  }
  /* Отражаем матрцу а относительно побочной диагонали*/
  int ib=0,jb =0;
  for(int i=0;i<n;++i) // записываем в b прочтенный матрицу, но отзеркаленный оносительно вертикали
      for(int j=n-1;j>=0;--j){
          b[ib][jb] = a[i][j];
          jb++;
          if(jb == n){
              ib++;
              jb = 0;
          }
      }

  int ic=0,jc =0;
  for(int i=0;i<n;++i) // записываем в c матрицу b, повернутый один раз по часовой стрелке.
      for (int j=n-1;j>=0;--j){
          c[ic][jc] = b[j][i];
          jc++;
          if(jc == n){
              ic++;
              jc = 0;
          }
      }
  for(int i=0;i<n;i++) delete [] b[i]; // массив b нам больше не нужен
  delete [] b; // освобождаем память из под него
  for(int i=0;i<n;i++){ // теперь матрицу построчно
    for(int j=0;j<n;++j)  write(fd[1],&a[i][j],sizeof(int)); // пишем в канал первую строку ориг. матрицы
    for(int j=0;j<n;++j)  write(fd[1],&c[i][j],sizeof(int)); // потом пишем в канал первую строку отраж. матрицы
      if(fork() == 0){ // создаем новый процесс
          int * tempA = new int[n];
          int * tempB = new int[n];
          for(int j=0;j<n;++j) read(fd[0],&tempA[j],sizeof(int)); // читаем из канала ориг строку
          for(int j=0;j<n;++j) read(fd[0],&tempB[j],sizeof(int)); // иотраж
          for(int j=0;j<n;++j) if(tempA[j] != tempB[j]){ // теперь сравниваем каждое число ориг и отраж строки
              cout << "Матрица не симметрична относительно побочной диагонали!" <<endl; // если не сошлись пишем об этом
              kill (getppid(), 9); // и проверка больше не нужна, убиваем родительский, а вместе с его смертью умрут и потомки
          }
          delete [] tempA;
          delete [] tempB;
          return 1; // закрываем потомка, если всё ок
      }else wait(NULL); //ветка потока-родителя должна ждать завершения потомка, чтобы избежать "эффекта гонки"
  }
  for(int i=0;i<n;i++) {delete [] a[i];delete [] c[i];} // чистим память
  delete [] a;
  delete [] c;
  cout << "Матрица симметрична относительно побочной диагонали!" <<endl; // если ни один потомок не убил предка - матрица симметрична.
  return 0;
}